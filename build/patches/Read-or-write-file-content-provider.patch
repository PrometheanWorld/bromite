From: Yifeng <wuyifeng@nd.com.cn>
Date: Tue, 2 Aug 2022 07:40:00 +0000
Subject: Read or write file content provider

Fix version: 1.2.0
Provide the APIs that read/write the 'Local State' file, since after Identity clears the Chromium
user data, we want to keep the file.
Provide the API that clears the user data, the files or dirs are:
- /data/data/org.chromium.chrome/app_tabs
- /data/data/org.chromium.chrome/app_chrome/Default/Account Web Data
- /data/data/org.chromium.chrome/app_chrome/Default/Account Web Data-journal
- /data/data/org.chromium.chrome/app_chrome/Default/Download Service
- /data/data/org.chromium.chrome/app_chrome/Default/History
- /data/data/org.chromium.chrome/app_chrome/Default/History-journal
- /data/data/org.chromium.chrome/app_chrome/Default/Login Data
- /data/data/org.chromium.chrome/app_chrome/Default/Login Data-journal
- /data/data/org.chromium.chrome/app_chrome/Default/Shortcuts
- /data/data/org.chromium.chrome/app_chrome/Default/Shortcuts-journal
- /data/data/org.chromium.chrome/app_chrome/Default/share_history
- /data/data/org.chromium.chrome/app_chrome/Default/shared_proto_db
- /data/data/org.chromium.chrome/app_chrome/Default/AutofillStrikeDatabase
- /data/data/org.chromium.chrome/app_chrome/Default/Session Storage
- /data/data/org.chromium.chrome/app_chrome/Default/Cookies
- /data/data/org.chromium.chrome/app_chrome/Default/Cookies-journal
- /storage/emulated/0/Android/data/org.chromium.chrome

Fix version: 1.2.1
AP9-10127: Provide the APIs that get the file URI.
Provide the APIs that get all files of the directory.
AP9-10282: Provide the API of deleting file or dir.

---
 chrome/android/BUILD.gn | 2 +
 chrome/android/chrome_java_sources.gni | 1 +
 chrome/android/java/AndroidManifest.xml | 21 +
 chrome/android/proguard/main.flags | 1 +
 chrome/android/java/res_template/xml/promethean_file_paths.xml | 10 +
 chrome/android/java/src/org/chromium/chrome/browser/PrometheanContentProvider.java | 262 +
 6 files changed, 297 insertions(+), 0 deletion(-)

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -2067,6 +2067,7 @@ if (current_toolchain == default_toolchain) {
     resources = [
       "java/res_template/xml/file_paths.xml",
       "java/res_template/xml/launchershortcuts.xml",
+      "java/res_template/xml/promethean_file_paths.xml",
       "java/res_template/xml/searchable.xml",
     ]
     res_dir = "java/res_template"
@@ -2078,6 +2079,7 @@ if (current_toolchain == default_toolchain) {
     resources = [
       "java/res_template/xml/file_paths.xml",
       "java/res_template/xml/launchershortcuts.xml",
+      "java/res_template/xml/promethean_file_paths.xml",
       "java/res_template/xml/searchable.xml",
     ]
     res_dir = "java/res_template"
diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -41,6 +41,7 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/NearOomMonitor.java",
   "java/src/org/chromium/chrome/browser/PlayServicesVersionInfo.java",
   "java/src/org/chromium/chrome/browser/PowerBroadcastReceiver.java",
+  "java/src/org/chromium/chrome/browser/PrometheanContentProvider.java",
   "java/src/org/chromium/chrome/browser/ServiceTabLauncher.java",
   "java/src/org/chromium/chrome/browser/ShortcutHelper.java",
   "java/src/org/chromium/chrome/browser/SnackbarActivity.java",
diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -24,6 +24,10 @@ by a child template that "extends" this file.

     <uses-feature android:glEsVersion="0x00020000" />

+    <permission android:name="org.chromium.chrome.permission.PROMETHEAN_PROVIDER"
+        android:label="provider permission"
+        android:protectionLevel="signature"/>
+
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission-sdk-23 android:name="android.permission.ACCESS_WIFI_STATE" />
@@ -1269,6 +1273,23 @@ by a child template that "extends" this file.
                   android:readPermission="android.permission.GLOBAL_SEARCH" />
       </provider>

+      <provider
+          android:authorities="org.chromium.chrome.PrometheanContentProvider"
+          android:name="org.chromium.chrome.browser.PrometheanContentProvider"
+          android:exported="true"
+          android:enabled="true"
+          android:permission="org.chromium.chrome.permission.PROMETHEAN_PROVIDER" />
+
+      <provider
+          android:authorities="org.chromium.chrome.PrometheanFileProvider"
+          android:name="androidx.core.content.FileProvider"
+          android:exported="false"
+          android:grantUriPermissions="true" >
+          <meta-data
+              android:name="android.support.FILE_PROVIDER_PATHS"
+              android:resource="@xml/promethean_file_paths" />
+      </provider>
+
       {% block base_application_definitions %}
       {% endblock %}
       {% block extra_application_definitions_for_test %}
diff --git a/chrome/android/proguard/main.flags b/chrome/android/proguard/main.flags
--- a/chrome/android/proguard/main.flags
+++ b/chrome/android/proguard/main.flags
@@ -41,3 +41,4 @@
 -keep,allowobfuscation public class ** extends org.chromium.chrome.browser.base.SplitCompat*$Impl {
   public <init>();
 }
+-keep class org.chromium.chrome.browser.PrometheanContentProvider {*;}
diff --git a/chrome/android/java/res_template/xml/promethean_file_paths.xml b/chrome/android/java/res_template/xml/promethean_file_paths.xml
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/res_template/xml/promethean_file_paths.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths xmlns:android="http://schemas.android.com/apk/res/android">
+   <files-path
+       name="data"
+       path=".." />
+
+   <external-files-path
+       name="external"
+       path=".." />
+</paths>
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/PrometheanContentProvider.java b/chrome/android/java/src/org/chromium/chrome/browser/PrometheanContentProvider.java
new file mode 100644
--- /dev/null
+++ b/chrome/android/java/src/org/chromium/chrome/browser/PrometheanContentProvider.java
@@ -0,0 +1,262 @@
+package org.chromium.chrome.browser;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.content.Intent;
+import android.content.UriMatcher;
+import android.database.Cursor;
+import android.database.MatrixCursor;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.util.Log;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.core.content.FileProvider;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Set;
+
+public class PrometheanContentProvider extends ContentProvider {
+
+    private static final String TAG = "PrometheanContentProvider";
+
+    private static final String AUTHORITY = "org.chromium.chrome.PrometheanContentProvider";
+    private static final String FILE_PROVIDER_URI = "org.chromium.chrome.PrometheanFileProvider";
+    private static final String PATH_DATA_DATA_LOCAL_STATE = "data-data/localState";
+    private static final String PATH_CLEAR_USER_DATA = "clearUserData";
+    private static final String PATH_GET_FILE_URI = "getFileUri";
+    private static final String PATH_GET_ALL_FILES_OF_DIR = "getAllFilesOfDir";
+    private static final String PATH_DELETE_FILE_OR_DIR = "deleteFileOrDir";
+    private static final int CODE_DATA_DATA_LOCAL_STATE = 1;
+    private static final int CODE_CLEAR_USER_DATA = 2;
+    private static final int CODE_GET_FILE_URI = 3;
+    private static final int CODE_GET_ALL_FILES_OF_DIR = 4;
+    private static final int CODE_DELETE_FILE_OR_DIR = 5;
+    private static final String KEY_DATA = "data";
+    private static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
+    private static final Set<String> CLEAR_FILES_OR_DIRS = new HashSet<>();
+
+    static {
+        URI_MATCHER.addURI(AUTHORITY, PATH_DATA_DATA_LOCAL_STATE, CODE_DATA_DATA_LOCAL_STATE);
+        URI_MATCHER.addURI(AUTHORITY, PATH_CLEAR_USER_DATA, CODE_CLEAR_USER_DATA);
+        URI_MATCHER.addURI(AUTHORITY, PATH_GET_FILE_URI, CODE_GET_FILE_URI);
+        URI_MATCHER.addURI(AUTHORITY, PATH_GET_ALL_FILES_OF_DIR, CODE_GET_ALL_FILES_OF_DIR);
+        URI_MATCHER.addURI(AUTHORITY, PATH_DELETE_FILE_OR_DIR, CODE_DELETE_FILE_OR_DIR);
+    }
+
+    @Override
+    public boolean onCreate() {
+        String dataDirPath = getContext().getDataDir().getAbsolutePath();
+        String appChromeDefaultDir = dataDirPath + "/app_chrome/Default";
+        String externalDir = "/storage/emulated/0/Android/data/" + getContext().getPackageName();
+        CLEAR_FILES_OR_DIRS.add(dataDirPath + "/app_tabs");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Account Web Data");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Account Web Data-journal");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Download Service");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/History");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/History-journal");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Login Data");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Login Data-journal");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Shortcuts");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Shortcuts-journal");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/share_history");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/shared_proto_db");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/AutofillStrikeDatabase");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Sessions");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Session Storage");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Top Sites");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Cookies");
+        CLEAR_FILES_OR_DIRS.add(appChromeDefaultDir + "/Cookies-journal");
+        CLEAR_FILES_OR_DIRS.add(externalDir);
+        return false;
+    }
+
+    @Nullable
+    @Override
+    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
+        int code = URI_MATCHER.match(uri);
+        if (code == CODE_DATA_DATA_LOCAL_STATE) {
+            String[] columnNames = {KEY_DATA};
+            Object[] columnValues = {readFromLocalState()};
+            MatrixCursor cursor = new MatrixCursor(columnNames);
+            cursor.addRow(columnValues);
+            return cursor;
+        } else if (code == CODE_GET_FILE_URI) {
+            if (projection == null || projection.length == 0) {
+                return null;
+            }
+            MatrixCursor cursor = new MatrixCursor(new String[0]);
+            cursor.addRow(new Object[0]);
+            Bundle bundle = new Bundle();
+            for (String filePath : projection) {
+                bundle.putString(filePath, fileToUri(new File(filePath)));
+            }
+            cursor.setExtras(bundle);
+            return cursor;
+        } else if (code == CODE_GET_ALL_FILES_OF_DIR) {
+            if (projection == null || projection.length == 0) {
+                return null;
+            }
+            MatrixCursor cursor = new MatrixCursor(new String[0]);
+            cursor.addRow(new Object[0]);
+            Bundle bundle = new Bundle();
+            for (String filePath : projection) {
+                ArrayList<String> list = new ArrayList<>();
+                getAllFilesOfDir(new File(filePath), list);
+                bundle.putStringArrayList(filePath, list);
+            }
+            cursor.setExtras(bundle);
+            return cursor;
+        }
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public String getType(@NonNull Uri uri) {
+        return null;
+    }
+
+    @Nullable
+    @Override
+    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
+        if (URI_MATCHER.match(uri) == CODE_DATA_DATA_LOCAL_STATE) {
+            if (values != null) {
+                writeToLocalState(values.getAsString(KEY_DATA));
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
+        int code = URI_MATCHER.match(uri);
+        if (code == CODE_CLEAR_USER_DATA) {
+            for (String path : CLEAR_FILES_OR_DIRS) {
+                deleteFileOrDir(new File(path));
+            }
+        } else if (code == CODE_DELETE_FILE_OR_DIR) {
+            if (selectionArgs != null && selectionArgs.length > 0) {
+                for (String path : selectionArgs) {
+                    deleteFileOrDir(new File(path));
+                }
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
+        return 0;
+    }
+
+    private String readFromLocalState() {
+        StringBuilder content = new StringBuilder();
+        File file = new File(getContext().getDataDir(), "app_chrome/Local State");
+        if (file.exists() && file.isFile()) {
+            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
+                String line;
+                while ((line = br.readLine()) != null) {
+                    content.append(line);
+                }
+                Log.d("PrometheanContentProvider", "readFromLocalState success");
+            } catch (Throwable e) {
+                Log.e("PrometheanContentProvider", "readFromLocalState error: " + e);
+            }
+        }
+        return content.toString();
+    }
+
+    private void writeToLocalState(String content) {
+        File localStateFile;
+        try {
+            File appChromeDir = new File(getContext().getDataDir(), "app_chrome");
+            if (!appChromeDir.exists()) {
+                appChromeDir.mkdirs();
+            }
+            localStateFile = new File(appChromeDir, "Local State");
+            if (localStateFile.exists()) {
+                localStateFile.delete();
+            }
+            if (TextUtils.isEmpty(content)) {
+                Log.d("PrometheanContentProvider", "writeToLocalState success");
+                return;
+            }
+            localStateFile.createNewFile();
+        } catch (Throwable e) {
+            Log.e("PrometheanContentProvider", "writeToLocalState create error: " + e);
+            return;
+        }
+        try (BufferedWriter bw = new BufferedWriter(new FileWriter(localStateFile))) {
+            bw.write(content);
+            Log.d("PrometheanContentProvider", "writeToLocalState success");
+        } catch (Throwable e) {
+            Log.e("PrometheanContentProvider", "writeToLocalState error: " + e);
+        }
+    }
+
+    private void deleteFileOrDir(File file) {
+        if (file == null || !file.exists()) {
+            return;
+        }
+        if (file.isFile()) {
+            boolean deleted = file.delete();
+            if (deleted) {
+                Log.d(TAG, "deleted file " + file.getAbsolutePath());
+            } else {
+                Log.d(TAG, "could not delete file " + file.getAbsolutePath());
+            }
+        } else if (file.isDirectory()) {
+            File[] files = file.listFiles();
+            if (files != null) {
+                for (File f : files) {
+                    deleteFileOrDir(f);
+                }
+            }
+        }
+    }
+
+    private String fileToUri(File file) {
+        try {
+            if (!file.exists()) {
+                File parentFile = file.getParentFile();
+                if (parentFile != null && !parentFile.exists()) {
+                    parentFile.mkdirs();
+                }
+                file.createNewFile();
+            }
+            Uri uri = FileProvider.getUriForFile(getContext(), FILE_PROVIDER_URI, file);
+            getContext().grantUriPermission(getCallingPackage(), uri,
+                    Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+            return uri.toString();
+        } catch (Throwable e) {
+            return null;
+        }
+    }
+
+    private void getAllFilesOfDir(File file, ArrayList<String> list) {
+        if (file == null || !file.exists()) {
+            return;
+        }
+        if (file.isFile()) {
+            list.add(file.getAbsolutePath());
+            return;
+        }
+        if (file.isDirectory()) {
+            File[] files = file.listFiles();
+            if (files != null && files.length > 0) {
+                for (File f : files) {
+                    getAllFilesOfDir(f, list);
+                }
+            }
+        }
+    }
+}
--
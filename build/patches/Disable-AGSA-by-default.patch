From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sun, 26 Sep 2021 11:17:53 +0200
Subject: Disable AGSA by default

License: GPL-3.0-only - https://spdx.org/licenses/GPL-3.0-only.html
---
 chrome/android/BUILD.gn                       |  3 --
 .../org/chromium/chrome/browser/AppHooks.java |  9 ----
 .../chrome/browser/IntentHandler.java         |  5 --
 .../chrome/browser/app/ChromeActivity.java    | 28 ----------
 .../ChromeContextMenuPopulator.java           |  7 ---
 ...stomTabActivityClientConnectionKeeper.java |  9 ----
 .../init/ProcessInitializationHandler.java    |  8 ---
 .../browser/ntp/search/SearchBoxMediator.java |  1 -
 .../chrome/browser/share/LensUtils.java       | 12 +----
 .../flags/android/chrome_feature_list.cc      |  2 +-
 .../browser/flags/CachedFeatureFlags.java     |  2 +-
 chrome/browser/ui/android/omnibox/BUILD.gn    |  2 -
 .../browser/omnibox/LocationBarMediator.java  |  1 -
 .../voice/AssistantVoiceSearchService.java    | 53 +------------------
 14 files changed, 5 insertions(+), 137 deletions(-)

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -363,7 +363,6 @@ android_library("chrome_java") {
     "//chrome/browser/first_run/android:java",
     "//chrome/browser/flags:java",
     "//chrome/browser/fullscreen/android:java",
-    "//chrome/browser/gsa:java",
     "//chrome/browser/history_clusters:java",
     "//chrome/browser/history_clusters:java_resources",
     "//chrome/browser/image_descriptions:java",
@@ -970,7 +969,6 @@ junit_binary("chrome_junit_tests") {
     "//chrome/browser/flags:flags_junit_tests",
     "//chrome/browser/flags:java",
     "//chrome/browser/fullscreen/android:java",
-    "//chrome/browser/gsa:java",
     "//chrome/browser/history_clusters:java",
     "//chrome/browser/image_descriptions:java",
     "//chrome/browser/image_editor/public:java",
@@ -1363,7 +1361,6 @@ android_library("chrome_test_java") {
     "//chrome/browser/first_run/android:java",
     "//chrome/browser/flags:java",
     "//chrome/browser/fullscreen/android:java",
-    "//chrome/browser/gsa:java",
     "//chrome/browser/history_clusters:java",
     "//chrome/browser/image_descriptions:javatests",
     "//chrome/browser/incognito:incognito_java_tests",
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java b/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/AppHooks.java
@@ -17,7 +17,6 @@ import org.chromium.chrome.browser.directactions.DirectActionCoordinator;
 import org.chromium.chrome.browser.feedback.FeedbackReporter;
 import org.chromium.chrome.browser.feedback.HelpAndFeedbackLauncher;
 import org.chromium.chrome.browser.feedback.HelpAndFeedbackLauncherImpl;
-import org.chromium.chrome.browser.gsa.GSAHelper;
 import org.chromium.chrome.browser.historyreport.AppIndexingReporter;
 import org.chromium.chrome.browser.init.ChromeStartupDelegate;
 import org.chromium.chrome.browser.init.ProcessInitializationHandler;
@@ -125,14 +124,6 @@ public abstract class AppHooks {
         return new FeedbackReporter() {};
     }
 
-    /**
-     * @return An instance of {@link GSAHelper} that handles the start point of chrome's integration
-     *         with GSA.
-     */
-    public GSAHelper createGsaHelper() {
-        return new GSAHelper();
-    }
-
     /**
      * Returns a new instance of HelpAndFeedbackLauncher.
      */
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/IntentHandler.java b/chrome/android/java/src/org/chromium/chrome/browser/IntentHandler.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/IntentHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/IntentHandler.java
@@ -42,7 +42,6 @@ import org.chromium.chrome.browser.customtabs.CustomTabsConnection;
 import org.chromium.chrome.browser.document.ChromeLauncherActivity;
 import org.chromium.chrome.browser.externalnav.IntentWithRequestMetadataHandler;
 import org.chromium.chrome.browser.externalnav.IntentWithRequestMetadataHandler.RequestMetadata;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.offlinepages.OfflinePageUtils;
 import org.chromium.chrome.browser.omnibox.suggestions.AutocompleteCoordinator;
 import org.chromium.chrome.browser.profiles.Profile;
@@ -226,8 +225,6 @@ public class IntentHandler {
     private static int sReferrerId;
     private static String sPendingIncognitoUrl;
 
-    public static final String PACKAGE_GSA = GSAState.PACKAGE_NAME;
-
     private static final String PACKAGE_GMAIL = "com.google.android.gm";
     private static final String PACKAGE_PLUS = "com.google.android.apps.plus";
     private static final String PACKAGE_HANGOUTS = "com.google.android.talk";
@@ -457,8 +454,6 @@ public class IntentHandler {
             return ExternalAppId.LINE;
         } else if (packageName.equals(PACKAGE_WHATSAPP)) {
             return ExternalAppId.WHATSAPP;
-        } else if (packageName.equals(PACKAGE_GSA)) {
-            return ExternalAppId.GSA;
         } else if (packageName.equals(ContextUtils.getApplicationContext().getPackageName())) {
             return ExternalAppId.CHROME;
         } else if (packageName.startsWith(WEBAPK_PACKAGE_PREFIX)) {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -112,10 +112,6 @@ import org.chromium.chrome.browser.fullscreen.BrowserControlsManager;
 import org.chromium.chrome.browser.fullscreen.BrowserControlsManagerSupplier;
 import org.chromium.chrome.browser.fullscreen.FullscreenBackPressHandler;
 import org.chromium.chrome.browser.fullscreen.FullscreenManager;
-import org.chromium.chrome.browser.gsa.ContextReporter;
-import org.chromium.chrome.browser.gsa.GSAAccountChangeListener;
-import org.chromium.chrome.browser.gsa.GSAContextDisplaySelection;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.history.HistoryManagerUtils;
 import org.chromium.chrome.browser.init.AsyncInitializationActivity;
 import org.chromium.chrome.browser.init.ProcessInitializationHandler;
@@ -293,7 +289,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
     private TabContentManager mTabContentManager;
 
     private UmaSessionStats mUmaSessionStats;
-    private ContextReporter mContextReporter;
     private MostVisitedSites mMostVisitedSites;
 
     private boolean mPartnerBrowserRefreshNeeded;
@@ -378,8 +373,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
 
     private LaunchCauseMetrics mLaunchCauseMetrics;
 
-    private GSAAccountChangeListener mGSAAccountChangeListener;
-
     // TODO(972867): Pull MenuOrKeyboardActionController out of ChromeActivity.
     private List<MenuOrKeyboardActionController.MenuOrKeyboardActionHandler> mMenuActionHandlers =
             new ArrayList<>();
@@ -1168,10 +1161,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
 
     @Override
     public void onStopWithNative() {
-        if (GSAState.getInstance(this).isGsaAvailable() && !SysUtils.isLowEndDevice()) {
-            if (mGSAAccountChangeListener != null) mGSAAccountChangeListener.disconnect();
-        }
-
         super.onStopWithNative();
     }
 
@@ -1260,23 +1249,6 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
             FontSizePrefs.getInstance(Profile.getLastUsedRegularProfile())
                     .recordUserFontPrefOnStartup();
         });
-
-        // GSA connection is not needed on low-end devices because Icing is disabled.
-        if (!SysUtils.isLowEndDevice()) {
-            if (isActivityFinishingOrDestroyed()) return;
-            DeferredStartupHandler.getInstance().addDeferredTask(() -> {
-                if (!GSAState.getInstance(this).isGsaAvailable()) {
-                    ContextReporter.reportStatus(ContextReporter.STATUS_GSA_NOT_AVAILABLE);
-                    return;
-                }
-
-                if (mGSAAccountChangeListener == null) {
-                    mGSAAccountChangeListener =
-                            GSAAccountChangeListener.create(AppHooks.get().createGsaHelper());
-                }
-                mGSAAccountChangeListener.connect();
-            });
-        }
     }
 
     /**
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/contextmenu/ChromeContextMenuPopulator.java b/chrome/android/java/src/org/chromium/chrome/browser/contextmenu/ChromeContextMenuPopulator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/contextmenu/ChromeContextMenuPopulator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/contextmenu/ChromeContextMenuPopulator.java
@@ -37,7 +37,6 @@ import org.chromium.chrome.browser.contextmenu.ContextMenuCoordinator.ListItemTy
 import org.chromium.chrome.browser.feature_engagement.TrackerFactory;
 import org.chromium.chrome.browser.firstrun.FirstRunStatus;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.lens.LensController;
 import org.chromium.chrome.browser.lens.LensEntryPoint;
 import org.chromium.chrome.browser.lens.LensIntentParams;
@@ -997,12 +996,6 @@ public class ChromeContextMenuPopulator implements ContextMenuPopulator {
                     LensMetrics.LensSupportStatus.ACTIVITY_NOT_ACCESSIBLE);
             return false;
         }
-        if (GSAState.getInstance(mContext).isAgsaVersionBelowMinimum(
-                    versionName, LensUtils.getMinimumAgsaVersionForLensSupport())) {
-            LensMetrics.recordLensSupportStatus(
-                    LENS_SUPPORT_STATUS_HISTOGRAM_NAME, LensMetrics.LensSupportStatus.OUT_OF_DATE);
-            return false;
-        }
 
         if (LensUtils.isDeviceOsBelowMinimum()) {
             LensMetrics.recordLensSupportStatus(
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivityClientConnectionKeeper.java b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivityClientConnectionKeeper.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivityClientConnectionKeeper.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivityClientConnectionKeeper.java
@@ -11,7 +11,6 @@ import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.chrome.browser.browserservices.intents.BrowserServicesIntentDataProvider;
 import org.chromium.chrome.browser.customtabs.content.CustomTabActivityTabProvider;
 import org.chromium.chrome.browser.dependency_injection.ActivityScope;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.lifecycle.ActivityLifecycleDispatcher;
 import org.chromium.chrome.browser.lifecycle.StartStopWithNativeObserver;
 import org.chromium.chrome.browser.tab.Tab;
@@ -95,13 +94,5 @@ public class CustomTabActivityClientConnectionKeeper implements StartStopWithNat
             }
         }
         assert status >= 0;
-
-        if (GSAState.isGsaPackageName(packageName)) {
-            RecordHistogram.recordEnumeratedHistogram("CustomTabs.ConnectionStatusOnReturn.GSA",
-                    status, ConnectionStatus.NUM_ENTRIES);
-        } else {
-            RecordHistogram.recordEnumeratedHistogram("CustomTabs.ConnectionStatusOnReturn.NonGSA",
-                    status, ConnectionStatus.NUM_ENTRIES);
-        }
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java b/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/init/ProcessInitializationHandler.java
@@ -371,14 +371,6 @@ public class ProcessInitializationHandler {
             }
         });
 
-        deferredStartupHandler.addDeferredTask(new Runnable() {
-            @Override
-            public void run() {
-                // Starts syncing with GSA.
-                AppHooks.get().createGsaHelper().startSync();
-            }
-        });
-
         deferredStartupHandler.addDeferredTask(new Runnable() {
             @Override
             public void run() {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java b/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ntp/search/SearchBoxMediator.java
@@ -13,7 +13,6 @@ import android.view.ViewGroup;
 
 import androidx.core.graphics.drawable.RoundedBitmapDrawable;
 
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.lens.LensController;
 import org.chromium.chrome.browser.lens.LensEntryPoint;
 import org.chromium.chrome.browser.lens.LensIntentParams;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/share/LensUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/share/LensUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/share/LensUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/share/LensUtils.java
@@ -10,7 +10,6 @@ import android.text.TextUtils;
 
 import org.chromium.chrome.browser.IntentHandler;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.lens.LensController;
 import org.chromium.components.externalauth.ExternalAuthUtils;
 
@@ -57,12 +56,7 @@ public class LensUtils {
             if (context == null) {
                 return "";
             }
-            String agsaVersion = GSAState.getInstance(context).getAgsaVersionName();
-            if (agsaVersion == null) {
                 return "";
-            } else {
-                return agsaVersion;
-            }
         }
     }
 
@@ -114,11 +108,7 @@ public class LensUtils {
      * @return Whether the package is valid.
      */
     public static boolean isValidAgsaPackage(final ExternalAuthUtils externalAuthUtils) {
-        if (sFakePassableLensEnvironmentForTesting) {
-            return true;
-        }
-
-        return externalAuthUtils.isGoogleSigned(IntentHandler.PACKAGE_GSA);
+        return false;
     }
 
     /**
diff --git a/chrome/browser/flags/android/chrome_feature_list.cc b/chrome/browser/flags/android/chrome_feature_list.cc
--- a/chrome/browser/flags/android/chrome_feature_list.cc
+++ b/chrome/browser/flags/android/chrome_feature_list.cc
@@ -642,7 +642,7 @@ const base::Feature kDynamicColorButtonsAndroid{
     "DynamicColorButtonsAndroid", base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kExperimentsForAgsa{"ExperimentsForAgsa",
-                                        base::FEATURE_ENABLED_BY_DEFAULT};
+                                        base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kExploreSites{"ExploreSites",
                                   base::FEATURE_DISABLED_BY_DEFAULT};
diff --git a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java
--- a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java
+++ b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/CachedFeatureFlags.java
@@ -89,7 +89,7 @@ public class CachedFeatureFlags {
                     .put(ChromeFeatureList.READ_LATER, false)
                     .put(ChromeFeatureList.CCT_REMOVE_REMOTE_VIEW_IDS, true)
                     .put(ChromeFeatureList.CCT_INCOGNITO, true)
-                    .put(ChromeFeatureList.EXPERIMENTS_FOR_AGSA, true)
+                    .put(ChromeFeatureList.EXPERIMENTS_FOR_AGSA, false)
                     .put(ChromeFeatureList.APP_MENU_MOBILE_SITE_OPTION, false)
                     .put(ChromeFeatureList.OPTIMIZATION_GUIDE_PUSH_NOTIFICATIONS, false)
                     .put(ChromeFeatureList.NEW_WINDOW_APP_MENU, true)
diff --git a/chrome/browser/ui/android/omnibox/BUILD.gn b/chrome/browser/ui/android/omnibox/BUILD.gn
--- a/chrome/browser/ui/android/omnibox/BUILD.gn
+++ b/chrome/browser/ui/android/omnibox/BUILD.gn
@@ -139,7 +139,6 @@ android_library("java") {
     "//chrome/browser/device:java",
     "//chrome/browser/feature_engagement:java",
     "//chrome/browser/flags:java",
-    "//chrome/browser/gsa:java",
     "//chrome/browser/history_clusters:java",
     "//chrome/browser/language/android:java",
     "//chrome/browser/lens:java",
@@ -382,7 +381,6 @@ android_library("junit") {
     "//chrome/android:base_module_java",
     "//chrome/browser/device:java",
     "//chrome/browser/flags:java",
-    "//chrome/browser/gsa:java",
     "//chrome/browser/lens:java",
     "//chrome/browser/locale:java",
     "//chrome/browser/preferences:java",
diff --git a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java
--- a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java
+++ b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/LocationBarMediator.java
@@ -35,7 +35,6 @@ import org.chromium.base.task.PostTask;
 import org.chromium.chrome.browser.device.DeviceClassManager;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.flags.ChromeSwitches;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.lens.LensController;
 import org.chromium.chrome.browser.lens.LensEntryPoint;
 import org.chromium.chrome.browser.lens.LensIntentParams;
diff --git a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/voice/AssistantVoiceSearchService.java b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/voice/AssistantVoiceSearchService.java
--- a/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/voice/AssistantVoiceSearchService.java
+++ b/chrome/browser/ui/android/omnibox/java/src/org/chromium/chrome/browser/omnibox/voice/AssistantVoiceSearchService.java
@@ -24,7 +24,6 @@ import org.chromium.base.SysUtils;
 import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.base.task.AsyncTask;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
-import org.chromium.chrome.browser.gsa.GSAState;
 import org.chromium.chrome.browser.omnibox.R;
 import org.chromium.chrome.browser.preferences.SharedPreferencesManager;
 import org.chromium.chrome.browser.profiles.Profile;
@@ -109,7 +108,6 @@ public class AssistantVoiceSearchService implements TemplateUrlService.TemplateU
     private final Context mContext;
     private final ExternalAuthUtils mExternalAuthUtils;
     private final TemplateUrlService mTemplateUrlService;
-    private final GSAState mGsaState;
     private final SharedPreferencesManager mSharedPrefsManager;
     private final IdentityManager mIdentityManager;
     private final AccountManagerFacade mAccountManagerFacade;
@@ -123,14 +121,13 @@ public class AssistantVoiceSearchService implements TemplateUrlService.TemplateU
 
     public AssistantVoiceSearchService(@NonNull Context context,
             @NonNull ExternalAuthUtils externalAuthUtils,
-            @NonNull TemplateUrlService templateUrlService, @NonNull GSAState gsaState,
+            @NonNull TemplateUrlService templateUrlService,
             @Nullable Observer observer, @NonNull SharedPreferencesManager sharedPrefsManager,
             @NonNull IdentityManager identityManager,
             @NonNull AccountManagerFacade accountManagerFacade) {
         mContext = context;
         mExternalAuthUtils = externalAuthUtils;
         mTemplateUrlService = templateUrlService;
-        mGsaState = gsaState;
         mSharedPrefsManager = sharedPrefsManager;
         mObserver = observer;
         mIdentityManager = identityManager;
@@ -266,31 +263,11 @@ public class AssistantVoiceSearchService implements TemplateUrlService.TemplateU
             boolean returnImmediately, List<Integer> outList) {
         assert returnImmediately || outList != null;
 
-        if (!mGsaState.isGsaInstalled()) {
-            if (returnImmediately) return false;
-            outList.add(EligibilityFailureReason.AGSA_NOT_INSTALLED);
-        }
-
-        if (!mGsaState.canAgsaHandleIntent(getAssistantVoiceSearchIntent())) {
-            if (returnImmediately) return false;
-            outList.add(EligibilityFailureReason.AGSA_CANT_HANDLE_INTENT);
-        }
-
-        if (mGsaState.isAgsaVersionBelowMinimum(
-                    mGsaState.getAgsaVersionName(), getAgsaMinVersion())) {
-            if (returnImmediately) return false;
-            outList.add(EligibilityFailureReason.AGSA_VERSION_BELOW_MINIMUM);
-        }
-
         // AGSA will throw an exception if Chrome isn't Google signed.
         if (!mExternalAuthUtils.isChromeGoogleSigned()) {
             if (returnImmediately) return false;
             outList.add(EligibilityFailureReason.CHROME_NOT_GOOGLE_SIGNED);
         }
-        if (!mExternalAuthUtils.isGoogleSigned(GSAState.PACKAGE_NAME)) {
-            if (returnImmediately) return false;
-            outList.add(EligibilityFailureReason.AGSA_NOT_GOOGLE_SIGNED);
-        }
 
         if (!mIsDefaultSearchEngineGoogle) {
             if (returnImmediately) return false;
@@ -317,13 +294,6 @@ public class AssistantVoiceSearchService implements TemplateUrlService.TemplateU
         return returnImmediately || outList.size() == 0;
     }
 
-    /** @return The Intent for Assistant voice search. */
-    public Intent getAssistantVoiceSearchIntent() {
-        Intent intent = new Intent(Intent.ACTION_SEARCH);
-        intent.setPackage(GSAState.PACKAGE_NAME);
-        return intent;
-    }
-
     /** Return the current user email or null if no account is present. */
     public @Nullable String getUserEmail() {
         CoreAccountInfo info = mIdentityManager.getPrimaryAccountInfo(ConsentLevel.SYNC);
@@ -352,7 +322,7 @@ public class AssistantVoiceSearchService implements TemplateUrlService.TemplateU
     public static void reportStartupUserEligibility(Context context) {
         AssistantVoiceSearchService service =
                 new AssistantVoiceSearchService(context, ExternalAuthUtils.getInstance(),
-                        TemplateUrlServiceFactory.get(), GSAState.getInstance(context),
+                        TemplateUrlServiceFactory.get(), null,
                         /*observer=*/null, SharedPreferencesManager.getInstance(),
                         IdentityServicesProvider.get().getIdentityManager(
                                 Profile.getLastUsedRegularProfile()),
@@ -372,25 +342,6 @@ public class AssistantVoiceSearchService implements TemplateUrlService.TemplateU
      *        eligibility on browser startup.
      */
     private void reportUserEligibility(String timingSuffix) {
-        List<Integer> failureReasons = new ArrayList<>();
-        boolean eligible = isDeviceEligibleForAssistant(
-                /* returnImmediately= */ false, /* outList */ failureReasons);
-        RecordHistogram.recordBooleanHistogram(USER_ELIGIBILITY_HISTOGRAM + timingSuffix, eligible);
-
-        // See notes in {@link GSAState#parseAgsaMajorMinorVersionAsInteger} for details about this
-        // number.
-        Integer versionNumber =
-                mGsaState.parseAgsaMajorMinorVersionAsInteger(mGsaState.getAgsaVersionName());
-        if (versionNumber != null) {
-            RecordHistogram.recordSparseHistogram(
-                    AGSA_VERSION_HISTOGRAM + timingSuffix, (int) versionNumber);
-        }
-
-        for (@EligibilityFailureReason int reason : failureReasons) {
-            RecordHistogram.recordEnumeratedHistogram(
-                    USER_ELIGIBILITY_FAILURE_REASON_HISTOGRAM + timingSuffix, reason,
-                    EligibilityFailureReason.NUM_ENTRIES);
-        }
     }
 
     private void updateColorfulMicState() {
--
2.25.1

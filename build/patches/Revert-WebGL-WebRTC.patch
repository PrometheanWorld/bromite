From: Yifeng <wuyifeng@nd.com.cn>
Date: Tue, 2 Aug 2022 07:40:00 +0000
Subject: Revert WebGl and WebRTC patches

Fix version: 1.2.1
This patch is to fix the issue that the camera can't render in the Zoom web app.
Relate to AP9-10428.

---
 .../browser_ui/site_settings/android/BUILD.gn |  6 ----
 .../BromiteCustomContentSettingImpl.java      |  2 --
 .../site_settings/SiteSettingsCategory.java   |  6 ++--
 .../core/browser/content_settings_registry.cc | 28 ----------------
 .../core/browser/content_settings_utils.cc    |  4 ---
 .../core/common/content_settings.cc           |  4 +--
 .../core/common/content_settings.h            |  2 --
 .../core/common/content_settings.mojom        |  2 --
 .../common/content_settings_mojom_traits.cc   |  4 +--
 .../common/content_settings_mojom_traits.h    | 10 ------
 .../core/common/content_settings_types.h      |  4 ---
 .../renderer/content_settings_agent_impl.cc   | 18 -----------
 .../renderer/content_settings_agent_impl.h    |  2 --
 .../platform/web_content_settings_client.h    |  4 ---
 .../execution_context/execution_context.cc    | 23 -------------
 .../execution_context/execution_context.h     |  5 ---
 .../peer_connection_dependency_factory.cc     |  5 ---
 .../webgl/webgl_rendering_context_base.cc     | 32 +++++++++++--------
 .../webgl/webgl_rendering_context_base.h      |  2 --
 19 files changed, 23 insertions(+), 140 deletions(-)

diff --git a/components/browser_ui/site_settings/android/BUILD.gn b/components/browser_ui/site_settings/android/BUILD.gn
--- a/components/browser_ui/site_settings/android/BUILD.gn
+++ b/components/browser_ui/site_settings/android/BUILD.gn
@@ -72,12 +72,6 @@ android_library("java") {
     "java/src/org/chromium/components/browser_ui/site_settings/BromiteCustomContentSettingImpl.java",
     "java/src/org/chromium/components/browser_ui/site_settings/BromiteCustomContentSetting.java",
   ]
-  sources += [
-    "java/src/org/chromium/components/browser_ui/site_settings/BromiteWebGLContentSetting.java",
-  ]
-  sources += [
-    "java/src/org/chromium/components/browser_ui/site_settings/BromiteWebRTCContentSetting.java",
-  ]
   annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
   resources_package = "org.chromium.components.browser_ui.site_settings"
   deps = [
diff --git a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/BromiteCustomContentSettingImpl.java b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/BromiteCustomContentSettingImpl.java
--- a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/BromiteCustomContentSettingImpl.java
+++ b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/BromiteCustomContentSettingImpl.java
@@ -43,8 +43,6 @@ public abstract class BromiteCustomContentSettingImpl {

     static {
         mItemList = new ArrayList<BromiteCustomContentSetting>();
-        mItemList.add(new BromiteWebGLContentSetting());
-        mItemList.add(new BromiteWebRTCContentSetting());
     }

     public static SiteSettingsCategory createFromType(
diff --git a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SiteSettingsCategory.java b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SiteSettingsCategory.java
--- a/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SiteSettingsCategory.java
+++ b/components/browser_ui/site_settings/android/java/src/org/chromium/components/browser_ui/site_settings/SiteSettingsCategory.java
@@ -44,7 +44,7 @@ public class SiteSettingsCategory {
             Type.PROTECTED_MEDIA, Type.SENSORS, Type.SOUND, Type.USB, Type.VIRTUAL_REALITY,
             Type.USE_STORAGE, Type.AUTO_DARK_WEB_CONTENT, Type.REQUEST_DESKTOP_SITE,
             Type.FEDERATED_IDENTITY_API, Type.TIMEZONE_OVERRIDE, Type.AUTOPLAY, Type.JAVASCRIPT_JIT,
-            Type.IMAGES, Type.WEBGL, Type.WEBRTC})
+            Type.IMAGES})
     @Retention(RetentionPolicy.SOURCE)
     public @interface Type {
         // All updates here must also be reflected in {@link #preferenceKey(int)
@@ -79,12 +79,10 @@ public class SiteSettingsCategory {
         int AUTOPLAY = 27;
         int JAVASCRIPT_JIT = 28;
         int IMAGES = 29;
-        int WEBGL = 30;
-        int WEBRTC = 31;
         /**
          * Number of handled categories used for calculating array sizes.
          */
-        int NUM_ENTRIES = 32;
+        int NUM_ENTRIES = 30;
     }

     private final BrowserContextHandle mBrowserContextHandle;
diff --git a/components/content_settings/core/browser/content_settings_registry.cc b/components/content_settings/core/browser/content_settings_registry.cc
--- a/components/content_settings/core/browser/content_settings_registry.cc
+++ b/components/content_settings/core/browser/content_settings_registry.cc
@@ -667,34 +667,6 @@ void ContentSettingsRegistry::Init() {
            ContentSettingsInfo::INHERIT_IN_INCOGNITO,
            ContentSettingsInfo::PERSISTENT,
            ContentSettingsInfo::EXCEPTIONS_ON_SECURE_ORIGINS_ONLY);
-
-  Register(ContentSettingsType::WEBGL, "webgl", CONTENT_SETTING_ALLOW,
-           WebsiteSettingsInfo::SYNCABLE,
-           AllowlistedSchemes(),
-           ValidSettings(CONTENT_SETTING_ALLOW,
-                         CONTENT_SETTING_BLOCK),
-           WebsiteSettingsInfo::SINGLE_ORIGIN_WITH_EMBEDDED_EXCEPTIONS_SCOPE,
-           WebsiteSettingsRegistry::PLATFORM_ANDROID,
-           ContentSettingsInfo::INHERIT_IN_INCOGNITO,
-           ContentSettingsInfo::PERSISTENT,
-           ContentSettingsInfo::EXCEPTIONS_ON_SECURE_AND_INSECURE_ORIGINS,
-           /*show_into_info_page*/ true,
-           /*permission_type_ui*/ IDS_SITE_SETTINGS_TYPE_WEBGL,
-           /*permission_type_ui_mid_sentence*/ IDS_SITE_SETTINGS_TYPE_WEBGL_MID_SENTENCE);
-
-  Register(ContentSettingsType::WEBRTC, "webrtc", CONTENT_SETTING_ALLOW,
-           WebsiteSettingsInfo::SYNCABLE,
-           AllowlistedSchemes(),
-           ValidSettings(CONTENT_SETTING_ALLOW,
-                         CONTENT_SETTING_BLOCK),
-           WebsiteSettingsInfo::SINGLE_ORIGIN_WITH_EMBEDDED_EXCEPTIONS_SCOPE,
-           WebsiteSettingsRegistry::PLATFORM_ANDROID,
-           ContentSettingsInfo::INHERIT_IN_INCOGNITO,
-           ContentSettingsInfo::PERSISTENT,
-           ContentSettingsInfo::EXCEPTIONS_ON_SECURE_AND_INSECURE_ORIGINS,
-           /*show_into_info_page*/ true,
-           /*permission_type_ui*/ IDS_SITE_SETTINGS_TYPE_WEBRTC,
-           /*permission_type_ui_mid_sentence*/ IDS_SITE_SETTINGS_TYPE_WEBRTC_MID_SENTENCE);
 }

 void ContentSettingsRegistry::Register(
diff --git a/components/content_settings/core/browser/content_settings_utils.cc b/components/content_settings/core/browser/content_settings_utils.cc
--- a/components/content_settings/core/browser/content_settings_utils.cc
+++ b/components/content_settings/core/browser/content_settings_utils.cc
@@ -155,10 +155,6 @@ void GetRendererContentSettingRules(const HostContentSettingsMap* map,
   std::string timezone;
   map->GetTimezoneOverrideValue(timezone);
   rules->timezone_override_value = timezone;
-  map->GetSettingsForOneType(ContentSettingsType::WEBGL,
-                             &(rules->webgl_rules));
-  map->GetSettingsForOneType(ContentSettingsType::WEBRTC,
-                             &(rules->webrtc_rules));
 }

 bool IsMorePermissive(ContentSetting a, ContentSetting b) {
diff --git a/components/content_settings/core/common/content_settings.cc b/components/content_settings/core/common/content_settings.cc
--- a/components/content_settings/core/common/content_settings.cc
+++ b/components/content_settings/core/common/content_settings.cc
@@ -195,9 +195,7 @@ bool RendererContentSettingRules::IsRendererContentSetting(
          content_type == ContentSettingsType::POPUPS ||
          content_type == ContentSettingsType::MIXEDSCRIPT ||
          content_type == ContentSettingsType::AUTO_DARK_WEB_CONTENT ||
-         content_type == ContentSettingsType::TIMEZONE_OVERRIDE ||
-         content_type == ContentSettingsType::WEBGL ||
-         content_type == ContentSettingsType::WEBRTC;
+         content_type == ContentSettingsType::TIMEZONE_OVERRIDE;
 }

 RendererContentSettingRules::RendererContentSettingRules() {}
diff --git a/components/content_settings/core/common/content_settings.h b/components/content_settings/core/common/content_settings.h
--- a/components/content_settings/core/common/content_settings.h
+++ b/components/content_settings/core/common/content_settings.h
@@ -85,8 +85,6 @@ struct RendererContentSettingRules {
   ContentSettingsForOneType auto_dark_content_rules;
   ContentSettingsForOneType timezone_override_rules;
   std::string timezone_override_value;
-  ContentSettingsForOneType webgl_rules;
-  ContentSettingsForOneType webrtc_rules;
 };

 namespace content_settings {
diff --git a/components/content_settings/core/common/content_settings.mojom b/components/content_settings/core/common/content_settings.mojom
--- a/components/content_settings/core/common/content_settings.mojom
+++ b/components/content_settings/core/common/content_settings.mojom
@@ -81,6 +81,4 @@ struct RendererContentSettingRules {
   array<ContentSettingPatternSource> auto_dark_content_rules;
   array<ContentSettingPatternSource> timezone_override_rules;
   string timezone_override_value;
-  array<ContentSettingPatternSource> webgl_rules;
-  array<ContentSettingPatternSource> webrtc_rules;
 };
diff --git a/components/content_settings/core/common/content_settings_mojom_traits.cc b/components/content_settings/core/common/content_settings_mojom_traits.cc
--- a/components/content_settings/core/common/content_settings_mojom_traits.cc
+++ b/components/content_settings/core/common/content_settings_mojom_traits.cc
@@ -104,9 +104,7 @@ bool StructTraits<content_settings::mojom::RendererContentSettingRulesDataView,
          data.ReadMixedContentRules(&out->mixed_content_rules) &&
          data.ReadAutoDarkContentRules(&out->auto_dark_content_rules) &&
          data.ReadTimezoneOverrideRules(&out->timezone_override_rules) &&
-         data.ReadTimezoneOverrideValue(&out->timezone_override_value) &&
-         data.ReadWebglRules(&out->webgl_rules) &&
-         data.ReadWebrtcRules(&out->webrtc_rules);
+         data.ReadTimezoneOverrideValue(&out->timezone_override_value);
 }

 }  // namespace mojo
diff --git a/components/content_settings/core/common/content_settings_mojom_traits.h b/components/content_settings/core/common/content_settings_mojom_traits.h
--- a/components/content_settings/core/common/content_settings_mojom_traits.h
+++ b/components/content_settings/core/common/content_settings_mojom_traits.h
@@ -165,16 +165,6 @@ struct StructTraits<
     return r.timezone_override_value;
   }

-  static const std::vector<ContentSettingPatternSource>& webgl_rules(
-      const RendererContentSettingRules& r) {
-    return r.webgl_rules;
-  }
-
-  static const std::vector<ContentSettingPatternSource>& webrtc_rules(
-      const RendererContentSettingRules& r) {
-    return r.webrtc_rules;
-  }
-
   static bool Read(
       content_settings::mojom::RendererContentSettingRulesDataView data,
       RendererContentSettingRules* out);
diff --git a/components/content_settings/core/common/content_settings_types.h b/components/content_settings/core/common/content_settings_types.h
--- a/components/content_settings/core/common/content_settings_types.h
+++ b/components/content_settings/core/common/content_settings_types.h
@@ -284,10 +284,6 @@ enum class ContentSettingsType : int32_t {
   // site instead of the mobile one.
   REQUEST_DESKTOP_SITE,

-  WEBGL,
-
-  WEBRTC,
-
   // Setting to indicate whether browser should allow signing into a website via
   // the browser FedCM API.
   FEDERATED_IDENTITY_API,
diff --git a/components/content_settings/renderer/content_settings_agent_impl.cc b/components/content_settings/renderer/content_settings_agent_impl.cc
--- a/components/content_settings/renderer/content_settings_agent_impl.cc
+++ b/components/content_settings/renderer/content_settings_agent_impl.cc
@@ -477,24 +477,6 @@ void ContentSettingsAgentImpl::ClearBlockedContentSettings() {
   cached_script_permissions_.clear();
 }

-bool ContentSettingsAgentImpl::AllowWebgl(bool enabled_per_settings) {
-  if (!content_setting_rules_)
-    return false;
-  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
-  return CONTENT_SETTING_ALLOW == GetContentSettingFromRules(
-             content_setting_rules_->webgl_rules, frame,
-             url::Origin(frame->GetDocument().GetSecurityOrigin()).GetURL());
-}
-
-bool ContentSettingsAgentImpl::AllowWebRTC(bool enabled_per_settings) {
-  if (!content_setting_rules_)
-    return false;
-  blink::WebLocalFrame* frame = render_frame()->GetWebFrame();
-  return CONTENT_SETTING_ALLOW == GetContentSettingFromRules(
-             content_setting_rules_->webrtc_rules, frame,
-             url::Origin(frame->GetDocument().GetSecurityOrigin()).GetURL());
-}
-
 bool ContentSettingsAgentImpl::IsAllowlistedForContentSettings() const {
   if (should_allowlist_)
     return true;
diff --git a/components/content_settings/renderer/content_settings_agent_impl.h b/components/content_settings/renderer/content_settings_agent_impl.h
--- a/components/content_settings/renderer/content_settings_agent_impl.h
+++ b/components/content_settings/renderer/content_settings_agent_impl.h
@@ -101,8 +101,6 @@ class ContentSettingsAgentImpl
   bool AllowAutoplay(bool default_value) override;
   bool AllowPopupsAndRedirects(bool default_value) override;
   bool ShouldAutoupgradeMixedContent() override;
-  bool AllowWebgl(bool enabled_per_settings) override;
-  bool AllowWebRTC(bool enabled_per_settings) override;

   bool allow_running_insecure_content() const {
     return allow_running_insecure_content_;
diff --git a/third_party/blink/public/platform/web_content_settings_client.h b/third_party/blink/public/platform/web_content_settings_client.h
--- a/third_party/blink/public/platform/web_content_settings_client.h
+++ b/third_party/blink/public/platform/web_content_settings_client.h
@@ -99,10 +99,6 @@ class WebContentSettingsClient {
     return default_value;
   }

-  virtual bool AllowWebgl(bool default_value) { return default_value; }
-
-  virtual bool AllowWebRTC(bool default_value) { return default_value; }
-
   // Reports that passive mixed content was found at the provided URL.
   virtual void PassiveInsecureContentFound(const WebURL&) {}

diff --git a/third_party/blink/renderer/core/execution_context/execution_context.cc b/third_party/blink/renderer/core/execution_context/execution_context.cc
--- a/third_party/blink/renderer/core/execution_context/execution_context.cc
+++ b/third_party/blink/renderer/core/execution_context/execution_context.cc
@@ -64,29 +64,6 @@

 namespace blink {

-blink::WebContentSettingsClient* GetContentSettingsClientFor(
-    ExecutionContext* context) {
-  blink::WebContentSettingsClient* settings = nullptr;
-  if (!context)
-    return settings;
-  if (auto* window = blink::DynamicTo<blink::LocalDOMWindow>(context)) {
-    auto* frame = window->GetFrame();
-    if (frame)
-      settings = frame->GetContentSettingsClient();
-  } else if (context->IsWorkerGlobalScope()) {
-    settings =
-        blink::To<blink::WorkerGlobalScope>(context)->ContentSettingsClient();
-  }
-  return settings;
-}
-
-bool AllowWebgl(ExecutionContext* context) {
-  blink::WebContentSettingsClient* settings = GetContentSettingsClientFor(context);
-  if (settings)
-    return settings->AllowWebgl(false);
-  return false;
-}
-
 ExecutionContext::ExecutionContext(v8::Isolate* isolate, Agent* agent)
     : isolate_(isolate),
       security_context_(this),
diff --git a/third_party/blink/renderer/core/execution_context/execution_context.h b/third_party/blink/renderer/core/execution_context/execution_context.h
--- a/third_party/blink/renderer/core/execution_context/execution_context.h
+++ b/third_party/blink/renderer/core/execution_context/execution_context.h
@@ -96,7 +96,6 @@ class SecurityOrigin;
 class ScriptState;
 class ScriptWrappable;
 class TrustedTypePolicyFactory;
-class WebContentSettingsClient;

 enum ReasonForCallingCanExecuteScripts {
   kAboutToExecuteScript,
@@ -105,10 +104,6 @@ enum ReasonForCallingCanExecuteScripts {

 enum ReferrerPolicySource { kPolicySourceHttpHeader, kPolicySourceMetaTag };

-CORE_EXPORT bool AllowWebgl(ExecutionContext* context);
-CORE_EXPORT WebContentSettingsClient* GetContentSettingsClientFor(
-    ExecutionContext* context);
-
 // An environment in which script can execute. This class exposes the common
 // properties of script execution environments on the web (i.e, common between
 // script executing in a window and script executing in a worker), such as:
diff --git a/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc b/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
--- a/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
+++ b/third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc
@@ -756,11 +756,6 @@ PeerConnectionDependencyFactory::CreatePortAllocator(
       // origin.
       WebRTCIPHandlingPolicy policy =
           GetWebRTCIPHandlingPolicy(webrtc_ip_handling_policy);
-      blink::WebContentSettingsClient* settings = web_frame->GetContentSettingsClient();
-      if (settings && settings->AllowWebRTC(false)) {
-        policy = kDefault;
-      }
-
       switch (policy) {
         // TODO(guoweis): specify the flag of disabling local candidate
         // collection when webrtc is updated.
diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.cc
@@ -216,13 +216,6 @@ void WebGLRenderingContextBase::InitializeWebGLContextLimits(
   }
 }

-bool WebGLRenderingContextBase::AllowWebglForHost(blink::CanvasRenderingContextHost* host) {
-  if (!host)
-    return false;
-  blink::ExecutionContext* context = host->GetTopExecutionContext();
-  return blink::AllowWebgl(context);
-}
-
 unsigned WebGLRenderingContextBase::CurrentMaxGLContexts() {
   MutexLocker locker(WebGLContextLimitMutex());
   DCHECK(webgl_context_limits_initialized_);
@@ -469,6 +462,25 @@ static String ExtractWebGLContextCreationError(
     const Platform::GraphicsInfo& info) {
   StringBuilder builder;
   builder.Append("Could not create a WebGL context");
+  FormatWebGLStatusString(
+      "VENDOR",
+      info.vendor_id ? String::Format("0x%04x", info.vendor_id) : "0xffff",
+      builder);
+  FormatWebGLStatusString(
+      "DEVICE",
+      info.device_id ? String::Format("0x%04x", info.device_id) : "0xffff",
+      builder);
+  FormatWebGLStatusString("GL_VENDOR", info.vendor_info, builder);
+  FormatWebGLStatusString("GL_RENDERER", info.renderer_info, builder);
+  FormatWebGLStatusString("GL_VERSION", info.driver_version, builder);
+  FormatWebGLStatusString("Sandboxed", info.sandboxed ? "yes" : "no", builder);
+  FormatWebGLStatusString("Optimus", info.optimus ? "yes" : "no", builder);
+  FormatWebGLStatusString("AMD switchable", info.amd_switchable ? "yes" : "no",
+                          builder);
+  FormatWebGLStatusString(
+      "Reset notification strategy",
+      String::Format("0x%04x", info.reset_notification_strategy).Utf8().c_str(),
+      builder);
   FormatWebGLStatusString("ErrorMessage", info.error_message.Utf8().c_str(),
                           builder);
   builder.Append('.');
@@ -536,12 +548,6 @@ WebGLRenderingContextBase::CreateWebGraphicsContext3DProvider(
     const CanvasContextCreationAttributesCore& attributes,
     Platform::ContextType context_type,
     Platform::GraphicsInfo* graphics_info) {
-  if (!AllowWebglForHost(host)) {
-    host->HostDispatchEvent(WebGLContextEvent::Create(
-        event_type_names::kWebglcontextcreationerror,
-        "disabled by site settings policy."));
-    return nullptr;
-  }
   if ((context_type == Platform::kWebGL1ContextType &&
        !host->IsWebGL1Enabled()) ||
       (context_type == Platform::kWebGL2ContextType &&
diff --git a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h
--- a/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h
+++ b/third_party/blink/renderer/modules/webgl/webgl_rendering_context_base.h
@@ -1826,8 +1826,6 @@ class MODULES_EXPORT WebGLRenderingContextBase : public CanvasRenderingContext,
                         DOMArrayBufferView* pixels,
                         int64_t offset);

-  static bool AllowWebglForHost(blink::CanvasRenderingContextHost* host);
-
   // Record Canvas/OffscreenCanvas.RenderingContextDrawnTo at the first draw
   // call.
   void RecordUKMCanvasDrawnToAtFirstDrawCall();
--
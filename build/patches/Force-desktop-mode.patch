From: Yifeng <wuyifeng@nd.com.cn>
Date: Fri, 5 Nov 2021 07:23:00 +0000
Subject: Force desktop mode.

This ensures that the default mode is the desktop mode, Desktop site is checked and the web page will be loaded in desktop mode.

---
 chrome/android/java/src/org/chromium/chrome/browser/settings/UserAgentPreferences.java | 4 ++--
 chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java | 12 ++++++------
 chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java | 2 +-
 content/browser/renderer_host/navigation_controller_android.cc | 2 +-
 content/browser/renderer_host/navigation_entry_impl.cc | 2 +-
 content/public/browser/navigation_controller.h | 2 +-
 weblayer/browser/tab_impl.cc | 2 +-
 7 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/settings/UserAgentPreferences.java b/chrome/android/java/src/org/chromium/chrome/browser/settings/UserAgentPreferences.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/UserAgentPreferences.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/UserAgentPreferences.java
@@ -71,7 +71,7 @@ public class UserAgentPreferences
         ChromeSwitchPreference alwaysDesktopModeSwitch =
                 (ChromeSwitchPreference) findPreference(PREF_STICK_DESKTOP_MODE_SWITCH);
         boolean enabled = SharedPreferencesManager.getInstance().readBoolean(
-            ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, false);
+            ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, true);
         alwaysDesktopModeSwitch.setChecked(enabled);
         alwaysDesktopModeSwitch.setOnPreferenceChangeListener((preference, newValue) -> {
             SharedPreferencesManager.getInstance().writeBoolean(
@@ -159,7 +159,7 @@ public class UserAgentPreferences

     private void UpdateAllTabs() {
         final boolean alwaysDesktopModeEnabled = SharedPreferencesManager.getInstance().readBoolean(
-            ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, false);
+            ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, true);
         TabWindowManagerSingleton.getInstance().SetOverrideUserAgentForAllTabs(alwaysDesktopModeEnabled);
     }

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
@@ -535,10 +535,10 @@ public class TabImpl implements Tab, TabObscuringHandler.Observer {
             }

             final boolean stickyDesktopModeEnabled = SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, false);
+                ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, true);
             if (stickyDesktopModeEnabled) {
                 boolean alwaysDesktopModeEnabled = SharedPreferencesManager.getInstance().readBoolean(
-                    ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, false);
+                    ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, true);

                 if (UrlUtilities.isInternalScheme(UrlFormatter.fixupUrl(params.getUrl()))) {
                     alwaysDesktopModeEnabled = false;
@@ -1449,9 +1449,9 @@ public class TabImpl implements Tab, TabObscuringHandler.Observer {
             mWebContents.setImportance(mImportance);

             if (SharedPreferencesManager.getInstance().readBoolean(
-                        ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, false) &&
+                        ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, true) &&
                 SharedPreferencesManager.getInstance().readBoolean(
-                        ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, false)) {
+                        ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, true)) {
                 ContentUtils.setUserAgentOverride(mWebContents, true);
             } else {
                 ContentUtils.setUserAgentOverride(mWebContents,
@@ -1755,9 +1755,9 @@ public class TabImpl implements Tab, TabObscuringHandler.Observer {

     private @UserAgentOverrideOption int calculateUserAgentOverrideOption(@Nullable GURL url) {
         if (SharedPreferencesManager.getInstance().readBoolean(
-                    ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, false) &&
+                    ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, true) &&
                 SharedPreferencesManager.getInstance().readBoolean(
-                    ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, false)) {
+                    ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, true)) {
             return UserAgentOverrideOption.INHERIT;
         }

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabUtils.java
@@ -148,7 +148,7 @@ public class TabUtils {
             ChromePreferenceKeys.USERAGENT_ALWAYS_DESKTOP_MODE, switchToDesktop);

         final boolean stickyDesktopModeEnabled = SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, false);
+                ChromePreferenceKeys.USERAGENT_STICKY_DESKTOP_MODE, true);
         if (stickyDesktopModeEnabled) {
             TabWindowManagerSingleton.getInstance().SetOverrideUserAgentForAllTabs(switchToDesktop);
         } else {
diff --git a/content/browser/renderer_host/navigation_controller_android.cc b/content/browser/renderer_host/navigation_controller_android.cc
--- a/content/browser/renderer_host/navigation_controller_android.cc
+++ b/content/browser/renderer_host/navigation_controller_android.cc
@@ -397,7 +397,7 @@ bool NavigationControllerAndroid::GetUseDesktopUserAgent(
     JNIEnv* env,
     const JavaParamRef<jobject>& obj) {
   NavigationEntry* entry = navigation_controller_->GetLastCommittedEntry();
-  return entry && entry->GetIsOverridingUserAgent();
+  return !entry || entry->GetIsOverridingUserAgent();
 }

 void NavigationControllerAndroid::SetUseDesktopUserAgent(
diff --git a/content/browser/renderer_host/navigation_entry_impl.cc b/content/browser/renderer_host/navigation_entry_impl.cc
--- a/content/browser/renderer_host/navigation_entry_impl.cc
+++ b/content/browser/renderer_host/navigation_entry_impl.cc
@@ -406,7 +406,7 @@ NavigationEntryImpl::NavigationEntryImpl(
       title_(title),
       transition_type_(transition_type),
       restore_type_(RestoreType::kNotRestored),
-      is_overriding_user_agent_(false),
+      is_overriding_user_agent_(true),
       http_status_code_(0),
       is_renderer_initiated_(is_renderer_initiated),
       should_clear_history_list_(false),
diff --git a/content/public/browser/navigation_controller.h b/content/public/browser/navigation_controller.h
--- a/content/public/browser/navigation_controller.h
+++ b/content/public/browser/navigation_controller.h
@@ -210,7 +210,7 @@ class NavigationController {

     // User agent override for this load. See comments in
     // UserAgentOverrideOption definition.
-    UserAgentOverrideOption override_user_agent = UA_OVERRIDE_INHERIT;
+    UserAgentOverrideOption override_user_agent = UA_OVERRIDE_TRUE;

     // Used in LOAD_TYPE_DATA loads only. Used for specifying a base URL
     // for pages loaded via data URLs.
diff --git a/weblayer/browser/tab_impl.cc b/weblayer/browser/tab_impl.cc
--- a/weblayer/browser/tab_impl.cc
+++ b/weblayer/browser/tab_impl.cc
@@ -912,7 +912,7 @@ void TabImpl::SetDesktopUserAgentEnabled(JNIEnv* env, jboolean enable) {
 jboolean TabImpl::IsDesktopUserAgentEnabled(JNIEnv* env) {
   auto* entry = web_contents_->GetController().GetLastCommittedEntry();
   if (!entry)
-    return false;
+    return true;

   // The same user agent override mechanism is used for per-navigation user
   // agent and desktop mode. Make sure not to return desktop mode for
--